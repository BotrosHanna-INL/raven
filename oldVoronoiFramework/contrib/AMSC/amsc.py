# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_amsc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_amsc')
    _amsc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_amsc', [dirname(__file__)])
        except ImportError:
            import _amsc
            return _amsc
        if fp is not None:
            try:
                _mod = imp.load_module('_amsc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _amsc = swig_import_helper()
    del swig_import_helper
else:
    import _amsc
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amsc.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _amsc.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _amsc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _amsc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _amsc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _amsc.SwigPyIterator_equal(self, x)

    def copy(self):
        return _amsc.SwigPyIterator_copy(self)

    def next(self):
        return _amsc.SwigPyIterator_next(self)

    def __next__(self):
        return _amsc.SwigPyIterator___next__(self)

    def previous(self):
        return _amsc.SwigPyIterator_previous(self)

    def advance(self, n):
        return _amsc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _amsc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _amsc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _amsc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _amsc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _amsc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _amsc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _amsc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FlowPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amsc.new_FlowPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["down"] = _amsc.FlowPair_down_set
    __swig_getmethods__["down"] = _amsc.FlowPair_down_get
    if _newclass:
        down = _swig_property(_amsc.FlowPair_down_get, _amsc.FlowPair_down_set)
    __swig_setmethods__["up"] = _amsc.FlowPair_up_set
    __swig_getmethods__["up"] = _amsc.FlowPair_up_get
    if _newclass:
        up = _swig_property(_amsc.FlowPair_up_get, _amsc.FlowPair_up_set)
    __swig_destroy__ = _amsc.delete_FlowPair
    __del__ = lambda self: None
FlowPair_swigregister = _amsc.FlowPair_swigregister
FlowPair_swigregister(FlowPair)

class AMSCFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AMSCFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AMSCFloat, name)
    __repr__ = _swig_repr

    def __init__(self, Xin, yin, _names, graph, gradientMethod, maxN, beta, persistenceType, win, edgeIndices, verbosity=False):
        this = _amsc.new_AMSCFloat(Xin, yin, _names, graph, gradientMethod, maxN, beta, persistenceType, win, edgeIndices, verbosity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self):
        return _amsc.AMSCFloat_Dimension(self)

    def Size(self):
        return _amsc.AMSCFloat_Size(self)

    def MaxY(self):
        return _amsc.AMSCFloat_MaxY(self)

    def MinY(self):
        return _amsc.AMSCFloat_MinY(self)

    def RangeY(self):
        return _amsc.AMSCFloat_RangeY(self)

    def MaxX(self, dim):
        return _amsc.AMSCFloat_MaxX(self, dim)

    def MinX(self, dim):
        return _amsc.AMSCFloat_MinX(self, dim)

    def RangeX(self, dim):
        return _amsc.AMSCFloat_RangeX(self, dim)

    def GetX(self, *args):
        return _amsc.AMSCFloat_GetX(self, *args)

    def GetY(self, i):
        return _amsc.AMSCFloat_GetY(self, i)

    def MinLabel(self, i, pers):
        return _amsc.AMSCFloat_MinLabel(self, i, pers)

    def MaxLabel(self, i, pers):
        return _amsc.AMSCFloat_MaxLabel(self, i, pers)

    def Name(self, dim):
        return _amsc.AMSCFloat_Name(self, dim)

    def Neighbors(self, index):
        return _amsc.AMSCFloat_Neighbors(self, index)

    def PrintHierarchy(self):
        return _amsc.AMSCFloat_PrintHierarchy(self)

    def SortedPersistences(self):
        return _amsc.AMSCFloat_SortedPersistences(self)

    def XMLFormattedHierarchy(self):
        return _amsc.AMSCFloat_XMLFormattedHierarchy(self)

    def GetPartitions(self, persistence):
        return _amsc.AMSCFloat_GetPartitions(self, persistence)

    def GetStableManifolds(self, persistence):
        return _amsc.AMSCFloat_GetStableManifolds(self, persistence)

    def GetUnstableManifolds(self, persistence):
        return _amsc.AMSCFloat_GetUnstableManifolds(self, persistence)
    __swig_destroy__ = _amsc.delete_AMSCFloat
    __del__ = lambda self: None
AMSCFloat_swigregister = _amsc.AMSCFloat_swigregister
AMSCFloat_swigregister(AMSCFloat)

class AMSCDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AMSCDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AMSCDouble, name)
    __repr__ = _swig_repr

    def __init__(self, Xin, yin, _names, graph, gradientMethod, maxN, beta, persistenceType, win, edgeIndices, verbosity=False):
        this = _amsc.new_AMSCDouble(Xin, yin, _names, graph, gradientMethod, maxN, beta, persistenceType, win, edgeIndices, verbosity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self):
        return _amsc.AMSCDouble_Dimension(self)

    def Size(self):
        return _amsc.AMSCDouble_Size(self)

    def MaxY(self):
        return _amsc.AMSCDouble_MaxY(self)

    def MinY(self):
        return _amsc.AMSCDouble_MinY(self)

    def RangeY(self):
        return _amsc.AMSCDouble_RangeY(self)

    def MaxX(self, dim):
        return _amsc.AMSCDouble_MaxX(self, dim)

    def MinX(self, dim):
        return _amsc.AMSCDouble_MinX(self, dim)

    def RangeX(self, dim):
        return _amsc.AMSCDouble_RangeX(self, dim)

    def GetX(self, *args):
        return _amsc.AMSCDouble_GetX(self, *args)

    def GetY(self, i):
        return _amsc.AMSCDouble_GetY(self, i)

    def MinLabel(self, i, pers):
        return _amsc.AMSCDouble_MinLabel(self, i, pers)

    def MaxLabel(self, i, pers):
        return _amsc.AMSCDouble_MaxLabel(self, i, pers)

    def Name(self, dim):
        return _amsc.AMSCDouble_Name(self, dim)

    def Neighbors(self, index):
        return _amsc.AMSCDouble_Neighbors(self, index)

    def PrintHierarchy(self):
        return _amsc.AMSCDouble_PrintHierarchy(self)

    def SortedPersistences(self):
        return _amsc.AMSCDouble_SortedPersistences(self)

    def XMLFormattedHierarchy(self):
        return _amsc.AMSCDouble_XMLFormattedHierarchy(self)

    def GetPartitions(self, persistence):
        return _amsc.AMSCDouble_GetPartitions(self, persistence)

    def GetStableManifolds(self, persistence):
        return _amsc.AMSCDouble_GetStableManifolds(self, persistence)

    def GetUnstableManifolds(self, persistence):
        return _amsc.AMSCDouble_GetUnstableManifolds(self, persistence)
    __swig_destroy__ = _amsc.delete_AMSCDouble
    __del__ = lambda self: None
AMSCDouble_swigregister = _amsc.AMSCDouble_swigregister
AMSCDouble_swigregister(AMSCDouble)

class vectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amsc.vectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amsc.vectorFloat___nonzero__(self)

    def __bool__(self):
        return _amsc.vectorFloat___bool__(self)

    def __len__(self):
        return _amsc.vectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _amsc.vectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amsc.vectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amsc.vectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amsc.vectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amsc.vectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amsc.vectorFloat___setitem__(self, *args)

    def pop(self):
        return _amsc.vectorFloat_pop(self)

    def append(self, x):
        return _amsc.vectorFloat_append(self, x)

    def empty(self):
        return _amsc.vectorFloat_empty(self)

    def size(self):
        return _amsc.vectorFloat_size(self)

    def swap(self, v):
        return _amsc.vectorFloat_swap(self, v)

    def begin(self):
        return _amsc.vectorFloat_begin(self)

    def end(self):
        return _amsc.vectorFloat_end(self)

    def rbegin(self):
        return _amsc.vectorFloat_rbegin(self)

    def rend(self):
        return _amsc.vectorFloat_rend(self)

    def clear(self):
        return _amsc.vectorFloat_clear(self)

    def get_allocator(self):
        return _amsc.vectorFloat_get_allocator(self)

    def pop_back(self):
        return _amsc.vectorFloat_pop_back(self)

    def erase(self, *args):
        return _amsc.vectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _amsc.new_vectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amsc.vectorFloat_push_back(self, x)

    def front(self):
        return _amsc.vectorFloat_front(self)

    def back(self):
        return _amsc.vectorFloat_back(self)

    def assign(self, n, x):
        return _amsc.vectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _amsc.vectorFloat_resize(self, *args)

    def insert(self, *args):
        return _amsc.vectorFloat_insert(self, *args)

    def reserve(self, n):
        return _amsc.vectorFloat_reserve(self, n)

    def capacity(self):
        return _amsc.vectorFloat_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorFloat
    __del__ = lambda self: None
vectorFloat_swigregister = _amsc.vectorFloat_swigregister
vectorFloat_swigregister(vectorFloat)

class vectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amsc.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amsc.vectorDouble___nonzero__(self)

    def __bool__(self):
        return _amsc.vectorDouble___bool__(self)

    def __len__(self):
        return _amsc.vectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _amsc.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amsc.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amsc.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amsc.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amsc.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amsc.vectorDouble___setitem__(self, *args)

    def pop(self):
        return _amsc.vectorDouble_pop(self)

    def append(self, x):
        return _amsc.vectorDouble_append(self, x)

    def empty(self):
        return _amsc.vectorDouble_empty(self)

    def size(self):
        return _amsc.vectorDouble_size(self)

    def swap(self, v):
        return _amsc.vectorDouble_swap(self, v)

    def begin(self):
        return _amsc.vectorDouble_begin(self)

    def end(self):
        return _amsc.vectorDouble_end(self)

    def rbegin(self):
        return _amsc.vectorDouble_rbegin(self)

    def rend(self):
        return _amsc.vectorDouble_rend(self)

    def clear(self):
        return _amsc.vectorDouble_clear(self)

    def get_allocator(self):
        return _amsc.vectorDouble_get_allocator(self)

    def pop_back(self):
        return _amsc.vectorDouble_pop_back(self)

    def erase(self, *args):
        return _amsc.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _amsc.new_vectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amsc.vectorDouble_push_back(self, x)

    def front(self):
        return _amsc.vectorDouble_front(self)

    def back(self):
        return _amsc.vectorDouble_back(self)

    def assign(self, n, x):
        return _amsc.vectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _amsc.vectorDouble_resize(self, *args)

    def insert(self, *args):
        return _amsc.vectorDouble_insert(self, *args)

    def reserve(self, n):
        return _amsc.vectorDouble_reserve(self, n)

    def capacity(self):
        return _amsc.vectorDouble_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorDouble
    __del__ = lambda self: None
vectorDouble_swigregister = _amsc.vectorDouble_swigregister
vectorDouble_swigregister(vectorDouble)

class vectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amsc.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amsc.vectorString___nonzero__(self)

    def __bool__(self):
        return _amsc.vectorString___bool__(self)

    def __len__(self):
        return _amsc.vectorString___len__(self)

    def __getslice__(self, i, j):
        return _amsc.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amsc.vectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amsc.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amsc.vectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amsc.vectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amsc.vectorString___setitem__(self, *args)

    def pop(self):
        return _amsc.vectorString_pop(self)

    def append(self, x):
        return _amsc.vectorString_append(self, x)

    def empty(self):
        return _amsc.vectorString_empty(self)

    def size(self):
        return _amsc.vectorString_size(self)

    def swap(self, v):
        return _amsc.vectorString_swap(self, v)

    def begin(self):
        return _amsc.vectorString_begin(self)

    def end(self):
        return _amsc.vectorString_end(self)

    def rbegin(self):
        return _amsc.vectorString_rbegin(self)

    def rend(self):
        return _amsc.vectorString_rend(self)

    def clear(self):
        return _amsc.vectorString_clear(self)

    def get_allocator(self):
        return _amsc.vectorString_get_allocator(self)

    def pop_back(self):
        return _amsc.vectorString_pop_back(self)

    def erase(self, *args):
        return _amsc.vectorString_erase(self, *args)

    def __init__(self, *args):
        this = _amsc.new_vectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amsc.vectorString_push_back(self, x)

    def front(self):
        return _amsc.vectorString_front(self)

    def back(self):
        return _amsc.vectorString_back(self)

    def assign(self, n, x):
        return _amsc.vectorString_assign(self, n, x)

    def resize(self, *args):
        return _amsc.vectorString_resize(self, *args)

    def insert(self, *args):
        return _amsc.vectorString_insert(self, *args)

    def reserve(self, n):
        return _amsc.vectorString_reserve(self, n)

    def capacity(self):
        return _amsc.vectorString_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorString
    __del__ = lambda self: None
vectorString_swigregister = _amsc.vectorString_swigregister
vectorString_swigregister(vectorString)

class vectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amsc.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amsc.vectorInt___nonzero__(self)

    def __bool__(self):
        return _amsc.vectorInt___bool__(self)

    def __len__(self):
        return _amsc.vectorInt___len__(self)

    def __getslice__(self, i, j):
        return _amsc.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amsc.vectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amsc.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amsc.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amsc.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amsc.vectorInt___setitem__(self, *args)

    def pop(self):
        return _amsc.vectorInt_pop(self)

    def append(self, x):
        return _amsc.vectorInt_append(self, x)

    def empty(self):
        return _amsc.vectorInt_empty(self)

    def size(self):
        return _amsc.vectorInt_size(self)

    def swap(self, v):
        return _amsc.vectorInt_swap(self, v)

    def begin(self):
        return _amsc.vectorInt_begin(self)

    def end(self):
        return _amsc.vectorInt_end(self)

    def rbegin(self):
        return _amsc.vectorInt_rbegin(self)

    def rend(self):
        return _amsc.vectorInt_rend(self)

    def clear(self):
        return _amsc.vectorInt_clear(self)

    def get_allocator(self):
        return _amsc.vectorInt_get_allocator(self)

    def pop_back(self):
        return _amsc.vectorInt_pop_back(self)

    def erase(self, *args):
        return _amsc.vectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _amsc.new_vectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amsc.vectorInt_push_back(self, x)

    def front(self):
        return _amsc.vectorInt_front(self)

    def back(self):
        return _amsc.vectorInt_back(self)

    def assign(self, n, x):
        return _amsc.vectorInt_assign(self, n, x)

    def resize(self, *args):
        return _amsc.vectorInt_resize(self, *args)

    def insert(self, *args):
        return _amsc.vectorInt_insert(self, *args)

    def reserve(self, n):
        return _amsc.vectorInt_reserve(self, n)

    def capacity(self):
        return _amsc.vectorInt_capacity(self)
    __swig_destroy__ = _amsc.delete_vectorInt
    __del__ = lambda self: None
vectorInt_swigregister = _amsc.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class setInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amsc.setInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amsc.setInt___nonzero__(self)

    def __bool__(self):
        return _amsc.setInt___bool__(self)

    def __len__(self):
        return _amsc.setInt___len__(self)

    def append(self, x):
        return _amsc.setInt_append(self, x)

    def __contains__(self, x):
        return _amsc.setInt___contains__(self, x)

    def __getitem__(self, i):
        return _amsc.setInt___getitem__(self, i)

    def add(self, x):
        return _amsc.setInt_add(self, x)

    def discard(self, x):
        return _amsc.setInt_discard(self, x)

    def __init__(self, *args):
        this = _amsc.new_setInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _amsc.setInt_empty(self)

    def size(self):
        return _amsc.setInt_size(self)

    def clear(self):
        return _amsc.setInt_clear(self)

    def swap(self, v):
        return _amsc.setInt_swap(self, v)

    def count(self, x):
        return _amsc.setInt_count(self, x)

    def begin(self):
        return _amsc.setInt_begin(self)

    def end(self):
        return _amsc.setInt_end(self)

    def rbegin(self):
        return _amsc.setInt_rbegin(self)

    def rend(self):
        return _amsc.setInt_rend(self)

    def erase(self, *args):
        return _amsc.setInt_erase(self, *args)

    def find(self, x):
        return _amsc.setInt_find(self, x)

    def lower_bound(self, x):
        return _amsc.setInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _amsc.setInt_upper_bound(self, x)

    def equal_range(self, x):
        return _amsc.setInt_equal_range(self, x)

    def insert(self, __x):
        return _amsc.setInt_insert(self, __x)
    __swig_destroy__ = _amsc.delete_setInt
    __del__ = lambda self: None
setInt_swigregister = _amsc.setInt_swigregister
setInt_swigregister(setInt)

class mapPartition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapPartition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapPartition, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amsc.mapPartition_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amsc.mapPartition___nonzero__(self)

    def __bool__(self):
        return _amsc.mapPartition___bool__(self)

    def __len__(self):
        return _amsc.mapPartition___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amsc.mapPartition___getitem__(self, key)

    def __delitem__(self, key):
        return _amsc.mapPartition___delitem__(self, key)

    def has_key(self, key):
        return _amsc.mapPartition_has_key(self, key)

    def keys(self):
        return _amsc.mapPartition_keys(self)

    def values(self):
        return _amsc.mapPartition_values(self)

    def items(self):
        return _amsc.mapPartition_items(self)

    def __contains__(self, key):
        return _amsc.mapPartition___contains__(self, key)

    def key_iterator(self):
        return _amsc.mapPartition_key_iterator(self)

    def value_iterator(self):
        return _amsc.mapPartition_value_iterator(self)

    def __setitem__(self, *args):
        return _amsc.mapPartition___setitem__(self, *args)

    def asdict(self):
        return _amsc.mapPartition_asdict(self)

    def __init__(self, *args):
        this = _amsc.new_mapPartition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _amsc.mapPartition_empty(self)

    def size(self):
        return _amsc.mapPartition_size(self)

    def swap(self, v):
        return _amsc.mapPartition_swap(self, v)

    def begin(self):
        return _amsc.mapPartition_begin(self)

    def end(self):
        return _amsc.mapPartition_end(self)

    def rbegin(self):
        return _amsc.mapPartition_rbegin(self)

    def rend(self):
        return _amsc.mapPartition_rend(self)

    def clear(self):
        return _amsc.mapPartition_clear(self)

    def get_allocator(self):
        return _amsc.mapPartition_get_allocator(self)

    def count(self, x):
        return _amsc.mapPartition_count(self, x)

    def erase(self, *args):
        return _amsc.mapPartition_erase(self, *args)

    def find(self, x):
        return _amsc.mapPartition_find(self, x)

    def lower_bound(self, x):
        return _amsc.mapPartition_lower_bound(self, x)

    def upper_bound(self, x):
        return _amsc.mapPartition_upper_bound(self, x)
    __swig_destroy__ = _amsc.delete_mapPartition
    __del__ = lambda self: None
mapPartition_swigregister = _amsc.mapPartition_swigregister
mapPartition_swigregister(mapPartition)

class mapManifolds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapManifolds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapManifolds, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amsc.mapManifolds_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amsc.mapManifolds___nonzero__(self)

    def __bool__(self):
        return _amsc.mapManifolds___bool__(self)

    def __len__(self):
        return _amsc.mapManifolds___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amsc.mapManifolds___getitem__(self, key)

    def __delitem__(self, key):
        return _amsc.mapManifolds___delitem__(self, key)

    def has_key(self, key):
        return _amsc.mapManifolds_has_key(self, key)

    def keys(self):
        return _amsc.mapManifolds_keys(self)

    def values(self):
        return _amsc.mapManifolds_values(self)

    def items(self):
        return _amsc.mapManifolds_items(self)

    def __contains__(self, key):
        return _amsc.mapManifolds___contains__(self, key)

    def key_iterator(self):
        return _amsc.mapManifolds_key_iterator(self)

    def value_iterator(self):
        return _amsc.mapManifolds_value_iterator(self)

    def __setitem__(self, *args):
        return _amsc.mapManifolds___setitem__(self, *args)

    def asdict(self):
        return _amsc.mapManifolds_asdict(self)

    def __init__(self, *args):
        this = _amsc.new_mapManifolds(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _amsc.mapManifolds_empty(self)

    def size(self):
        return _amsc.mapManifolds_size(self)

    def swap(self, v):
        return _amsc.mapManifolds_swap(self, v)

    def begin(self):
        return _amsc.mapManifolds_begin(self)

    def end(self):
        return _amsc.mapManifolds_end(self)

    def rbegin(self):
        return _amsc.mapManifolds_rbegin(self)

    def rend(self):
        return _amsc.mapManifolds_rend(self)

    def clear(self):
        return _amsc.mapManifolds_clear(self)

    def get_allocator(self):
        return _amsc.mapManifolds_get_allocator(self)

    def count(self, x):
        return _amsc.mapManifolds_count(self, x)

    def erase(self, *args):
        return _amsc.mapManifolds_erase(self, *args)

    def find(self, x):
        return _amsc.mapManifolds_find(self, x)

    def lower_bound(self, x):
        return _amsc.mapManifolds_lower_bound(self, x)

    def upper_bound(self, x):
        return _amsc.mapManifolds_upper_bound(self, x)
    __swig_destroy__ = _amsc.delete_mapManifolds
    __del__ = lambda self: None
mapManifolds_swigregister = _amsc.mapManifolds_swigregister
mapManifolds_swigregister(mapManifolds)

# This file is compatible with both classic and new-style classes.


